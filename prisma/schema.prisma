// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum hasPlayed {
  yes
  no
}

model User {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?         @unique
  hashedPassword String?
  emailVerified  DateTime?
  image          String?
  role           UserRole?
  // Optional for WebAuthn support
  upfrontTrack       UpfrontTrack[]  @relation("upfrontTrack")
  commercialTrack       CommercialTrack[]  @relation("commercialTrack")
  CommercialGigs      CommercialGigs[] @relation("CommercialGigs")
  UpfrontGigs      UpfrontGigs[] @relation("UpfrontGigs")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Mix {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  upfrontTracks    UpfrontMixTrack[]    @relation("MixTracks")
  commercialTracks    CommercialMixTrack[]    @relation("MixTracks")
}

model Tracks {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  title       String
 
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  upfrontTrack       UpfrontTrack[]   @relation("userTracks")
  commercial CommercialTrack[] @relation("userTracks")
 
 
}

model UpfrontTrack {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  userId   String   @db.ObjectId
  trackId  String   @db.ObjectId
  artist      String?
  label String?
  isExport   Boolean?
  status      Boolean? @default(false)
  position    Int?
   orderIndex Int?
 
  user     User     @relation("upfrontTrack",fields: [userId], references: [id], onDelete: Cascade)
  track    Tracks    @relation("userTracks",fields: [trackId], references: [id], onDelete: Cascade)

  mixes UpfrontMixTrack[] @relation("upfrontTrackMixes")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CommercialTrack {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  userId   String   @db.ObjectId
  trackId  String   @db.ObjectId
  artist      String?
  label     String?
  isExport   Boolean?
  status      Boolean? @default(false)
  position    Int?
  orderIndex Int?
  user     User     @relation("commercialTrack",fields: [userId], references: [id], onDelete: Cascade)
  track    Tracks    @relation("userTracks",fields: [trackId], references: [id], onDelete: Cascade)

  mixes CommercialMixTrack[] @relation("commercialTrackMixes")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UpfrontMixTrack {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  mixId           String   @db.ObjectId
  upfrontTrackId  String   @db.ObjectId

  mix       Mix      @relation("MixTracks", fields: [mixId], references: [id], onDelete: Cascade)
  track     UpfrontTrack @relation("upfrontTrackMixes", fields: [upfrontTrackId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([mixId, upfrontTrackId])
}



model CommercialMixTrack {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  mixId     String   @db.ObjectId

  commercialTrackId   String    @db.ObjectId

  mix       Mix      @relation("MixTracks", fields: [mixId], references: [id], onDelete: Cascade)
  track     CommercialTrack    @relation("commercialTrackMixes", fields: [commercialTrackId], references: [id], onDelete: Cascade)
  

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([mixId, commercialTrackId])
}

model CommercialGigs {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  clubName  String
  dayOfGig DateTime
  startDate String
  endDate  String
  isExport Boolean @default(false)
  hasPlayed hasPlayed @default(no)
  user      User     @relation("CommercialGigs", fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model UpfrontGigs {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  clubName  String
  dayOfGig DateTime
  startDate String
  endDate  String
  isExport Boolean @default(false)
  hasPlayed hasPlayed @default(no)
  user      User     @relation("UpfrontGigs", fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
